{
  "site": {
    "meta": {
      "version": "0.0.1",
      "title": "Eric Bailey",
      "url": "https://estrattonbailey.herokuapp.com",
      "author": "@estrattonbailey",
      "description": "Designer, developer.",
      "keywords": "developer",
      "og_img": "/"
    },
    "structure": {
      "types": {
        "post": {
          "template": "post",
          "hasPage": true,
          "rootPath": "writing"
        },
        "project": {
          "template": "post"
        }
      },
      "pages": {
        "index": {
          "template": "home"
        },
        "writing": {
          "template": "posts"
        }
      }
    },
    "assemble": {
      "layouts": {
        "base": "./src/markup/layouts/",
        "patterns": "*.hbs",
        "options": {}
      },
      "pages": {
        "base": "./src/markup/templates/",
        "patterns": "*.hbs",
        "options": {}
      },
      "partials": {
        "base": "./src/markup/",
        "patterns": [
          "components/*.hbs",
          "modules/*.hbs"
        ],
        "options": {}
      }
    }
  },
  "post": [
    {
      "id": "2nqXv4PXDKEeCe08CoGUmw",
      "type": "post",
      "createdAt": "2016-05-17T12:25:55.088Z",
      "title": "CSS Is An API",
      "body": "Say you’re developing an open source project. After you write the code, you need to design a user-friendly API that hides the inner workings of your library i.e. a _facade._ Not only will this make your code more intuitive, it will protect you against breaking changes in the future.\n\nExample: if you need to overhaul the business logic behind the API, your users can carry on their merry way because you can hook up the new code to the original API and not break anything.\n\n### So what does this have to do with CSS?\n\nMuch like an API gives users an indirect interface to access and interact with inner methods, when you create any class, you're actuallly creating a way for the DOM to access the properties you defined within the class selector.\n\nThink of this as your **CSS API**, with the class name as the end point.\n\nAnd just like in your open source library mentioned above, you should protect your API from future breaking changes.\n\n### Manage your [bystander dependencies](http://estrattonbailey.tumblr.com/post/139188171011/made-up-terms-bystander-dependencies)\nHow you access your CSS API is very important. Ideally, you would be able to combine or *compose* different end-points of your API to create more complex components. A really common example of this is in Bootstrap, where you have access to the `.pull-right` and `.pull-left` selectors.\n\nUsing this composition method with CSS means that if we need to float a button inside the `.hero` to the left of it's container, all we need to do is add the `.pull-left` class.\n\n```html\n<div class=\"hero\">\n  <button class=\"button pull-left\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  ...\n}\n.button {\n  ...\n}\n.pull-left {\n  float: left;\n}\n```\n    \nWriting markup and CSS this way means that each selector (end point) has it's own unique functionality. So if you find that `.pull-left` also needs to include `margin-right: 10px`, you can add it without changing the API interface.\n\nUnfortunately, what happens in a lot of projects is this:\n\n```html\n<div class=\"hero\">\n  <button class=\"button\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  .button {\n    float: left;\n  }\n}\n```\n\nThis is bad for two reasons. \n\n1. You button API is being modified: it breaks the [Open/Closed Principle](https://en.wikipedia.org/wiki/Open/closed_principle). Now, it includes a `float` property that didn't exist there before. If you try to add another `.button` to your `.hero` without a float, you can't!\n2. If the `.button` class changes to, say, `.btn`, the `float: left` addition no longer applies to buttons within the `.hero`!\n\nIt's also not as obvious to other developers what is adding the `float` to the `.button` element.\n\n### How to fix it\nIf you can't add the endpoint to the element directly, as with `.pull-left`, create another end point.\n\n```html\n<div class=\"hero\">\n  <button class=\"hero__button button\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  ...\n}\n.hero__button {\n  float: left;\n}\n```\n\nThis way, your `.button` API is untouched, and your dependency is limited to a semantic class `.hero__button` that clearly defines itself as a dependency of `.hero` with it's BEM syntax. Both can change independently with no side-effects!\n\n### Create a system\nSystems exist to manage issues like this. Find a ruleset you like and follow it. Or steal other people's ideas and make your own.",
      "excerpt": "Thinking about CSS as a way to interface with style properties.",
      "handle": "css-is-an-api",
      "template": "post.hbs",
      "path": "/writing/css-is-an-api/index.html",
      "permalink": "https://estrattonbailey.herokuapp.com/writing/css-is-an-api/index.html"
    },
    {
      "id": "1oZoifJ4ZWI6KmAyCaYKgU",
      "type": "post",
      "createdAt": "2016-03-05T20:53:36.153Z",
      "title": "Show Your Work",
      "body": "Lately I feel like I’ve been finding a lot of process articles floating around the internet and Twitter. These are articles that document the authors thought process, often times asking questions that they don’t know the answer to. This is awesome! For a couple main reasons: \n\nOne, for young devs like me, it’s reassuring knowing that even accomplished devs struggle with concepts and learning what works for them.\n\nTwo, it means that instead of calling others out and staking opinions on the best framework (which seems to happen a lot lately), these authors are letting people in a something we all share: we’re learning as we go.\n\nI’m thinking now about that quote attributed to Jeff Bezos:\n> People who are right a lot of the time are people who often change their minds.\n\nWhich brings me to my point.\n\n### The Point\n\nI just read [_Why Curry Helps_](https://hughfdjackson.com/javascript/why-curry-helps/) by Hugh Jackson. In the article he explains how currying, a feature of purely functional languages like Haskell, can be used in Javascript to great effect. The benefits as outlined by his examples are pretty clear: simple, reusable code.\n\nIn the comments, a guy named Josh Habdas made a good point though:\n> Taking ES6 arrow functions into consideration the boilerplate shown to access the data in the examples would be simplified markedly.\n\nJackson then responded with a link to [another of his articles](https://hughfdjackson.com/javascript/does-curry-help/), which addressed Habdas’s point and was aptly titled, _Does Curry Help?_ So, I read that article too.\n\nThe second article essentially said this: I was wrong two years ago about currying, and here are the takeaways I have from this learning process.\n\nI think some of the best of those takeaways are as follows:\n\n1.  “Simple”, he proposes, means that concerns aren’t tangled up together. “Easy”, that something close to your current understanding.\n\n2.  Perfectly simple code - code that doesn’t needlessly intertwine any concerns - gains your team little if it’s outstandingly difficult to work with.\n\n3.  While I still believe that the benefits I focussed on in [Why Curry Helps](https://hughfdjackson.com/javascript/why-curry-helps) exist, the article doesn’t pay enough attention to the issues with using the technique in practice.\n\n4.  I’ve seen the value of meeting people much closer to where they are.\n\nThese are powerful points that I’m going to try to keep in mind as I work with and grow teams.\n\nBut I think the greater lesson – and hopefully a trend – is that letting people into your process helps to bring everyone to the same level. Lack of experience shouldn't be a barrier to sharing honest thoughts. You don't have to know everything to contibute ideas, pose questions, and engage in constructive conversation.",
      "excerpt": "For young devs like me, it’s reassuring knowing that even accomplished devs struggle with concepts and learning what works for them.",
      "handle": "show-your-work",
      "template": "post.hbs",
      "path": "/writing/show-your-work/index.html",
      "permalink": "https://estrattonbailey.herokuapp.com/writing/show-your-work/index.html"
    }
  ],
  "project": [
    {
      "id": "56gn7TK9EcWYUYi4eUM8Wu",
      "type": "project",
      "createdAt": "2016-03-04T03:09:39.642Z",
      "title": "Svbstrate",
      "caption": "Simple, scalable CSS base layer.",
      "url": "http://github.com/estrattonbailey/svbstrate"
    },
    {
      "id": "H6KMK6vq0KsgKegkyqaWO",
      "type": "project",
      "createdAt": "2016-03-04T03:09:04.074Z",
      "title": "Startup Stock Photos",
      "caption": "Free tech stock photos.",
      "url": "http://startupstockphotos.com"
    }
  ]
}