{
  "site": {
    "meta": {
      "version": "0.0.1",
      "title": "Eric Bailey",
      "url": "https://estrattonbailey.herokuapp.com",
      "author": "@estrattonbailey",
      "description": "Designer, developer.",
      "keywords": "developer",
      "og_img": "/"
    },
    "structure": {
      "types": {
        "post": {
          "template": "post",
          "hasPage": true,
          "rootPath": "writing"
        },
        "project": {
          "template": "post"
        }
      },
      "pages": {
        "index": {
          "template": "home"
        },
        "writing": {
          "template": "posts"
        }
      }
    },
    "assemble": {
      "layouts": {
        "base": "./src/markup/layouts/",
        "patterns": "*.hbs",
        "options": {}
      },
      "pages": {
        "base": "./src/markup/templates/",
        "patterns": "*.hbs",
        "options": {}
      },
      "partials": {
        "base": "./src/markup/",
        "patterns": [
          "components/*.hbs",
          "modules/*.hbs"
        ],
        "options": {}
      }
    }
  },
  "post": [
    {
      "fields": {
        "title": "CSS is an API",
        "content": "Say youâ€™re developing an open source project. After you write the code, you need to design a user-friendly API that hides the inner workings of your library i.e. a _facade._ Not only will this make your code more intuitive, it will protect you against breaking changes in the future.\n\nExample: if you need to overhaul the business logic behind the API, your users can carry on their merry way because you can hook up the new code to the original API and not break anything.\n\n### So what does this have to do with CSS?\n\nMuch like an API gives users an indirect interface to access and interact with inner methods, when you create any class, you're actuallly creating a way for the DOM to access the properties you defined within the class selector.\n\nThink of this as your **CSS API**, with the class name as the end point.\n\nAnd just like in your open source library mentioned above, you should protect your API from future breaking changes.\n\n### Manage your [bystander dependencies](http://estrattonbailey.tumblr.com/post/139188171011/made-up-terms-bystander-dependencies)\nHow you access your CSS API is very important. Ideally, you would be able to combine or *compose* different end-points of your API to create more complex components. A really common example of this is in Bootstrap, where you have access to the `.pull-right` and `.pull-left` selectors.\n\nUsing this composition method with CSS means that if we need to float a button inside the `.hero` to the left of it's container, all we need to do is add the `.pull-left` class.\n\n```html\n<div class=\"hero\">\n  <button class=\"button pull-left\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  ...\n}\n.button {\n  ...\n}\n.pull-left {\n  float: left;\n}\n```\n    \nWriting markup and CSS this way means that each selector (end point) has it's own unique functionality. So if you find that `.pull-left` also needs to include `margin-right: 10px`, you can add it without changing the API interface.\n\nUnfortunately, what happens in a lot of projects is this:\n\n```html\n<div class=\"hero\">\n  <button class=\"button\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  .button {\n    float: left;\n  }\n}\n```\n\nThis is bad for two reasons. \n\n1. You button API is being modified: it breaks the [Open/Closed Principle](https://en.wikipedia.org/wiki/Open/closed_principle). Now, it includes a `float` property that didn't exist there before. If you try to add another `.button` to your `.hero` without a float, you can't!\n2. If the `.button` class changes to, say, `.btn`, the `float: left` addition no longer applies to buttons within the `.hero`!\n\nIt's also not as obvious to other developers what is adding the `float` to the `.button` element.\n\n### How to fix it\nIf you can't add the endpoint to the element directly, as with `.pull-left`, create another end point.\n\n```html\n<div class=\"hero\">\n  <button class=\"hero__button button\">Buy Now</button>\n</div>\n```\n\n```scss\n.hero {\n  ...\n}\n.hero__button {\n  float: left;\n}\n```\n\nThis way, your `.button` API is untouched, and your dependency is limited to a semantic class `.hero__button` that clearly defines itself as a dependency of `.hero` with it's BEM syntax. Both can change independently with no side-effects!\n\n### Create a system\nSystems exist to manage issues like this. Find a ruleset you like and follow it. Or steal other people's ideas and make your own.",
        "excerpt": "Thinking about CSS as a way to interface with style properties."
      },
      "createdAt": "2016-05-01T19:34:27.715Z"
    }
  ],
  "project": [
    {
      "fields": {
        "title": "Stash",
        "caption": "A tiny markdown editor in your browser.",
        "url": "http://estrattonbailey.com/Aster"
      },
      "createdAt": "2016-05-07T21:53:29.813Z"
    },
    {
      "fields": {
        "title": "Lookout.js",
        "caption": "A tiny reactive accessor library in Javascript.",
        "url": "https://github.com/estrattonbailey/lookoutjs"
      },
      "createdAt": "2016-05-07T21:55:55.915Z"
    },
    {
      "fields": {
        "title": "Startup Stock Photos",
        "caption": "Free tech stock photos.",
        "url": "http://startupstockphotos.com"
      },
      "createdAt": "2016-05-01T20:18:39.178Z"
    },
    {
      "fields": {
        "title": "Svbstrate",
        "caption": "A simple, scalable SCSS base-layer.",
        "url": "http://svbstrate.io"
      },
      "createdAt": "2016-05-07T21:51:31.110Z"
    }
  ]
}